
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ application_settings.webapp_uuid }}"
  namespace: "{{ application_settings.namespace_uuid }}"
  labels:
    app: "{{ application_settings.webapp_uuid }}"
    environment: "{{ application_settings.environment }}"
    alias: "{{ application_settings.webapp_name }}"
    namespace: "{{ application_settings.namespace_name }}"
    tier: "tier-3"
    type: "web"
spec:
  selector:
    matchLabels:
      app: {{ application_settings.webapp_uuid }}
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "{{ application_settings.custom_metrics.port | string }}"
        prometheus.io/scrape: "{{ application_settings.custom_metrics.enabled | string | lower }}"
        prometheus.io/path: "{{ application_settings.custom_metrics.path | string }}"
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "true"
      labels:
        app: {{ application_settings.webapp_uuid }}
        environment: "{{ application_settings.environment }}"
        alias: {{ application_settings.webapp_name }}
        namespace: "{{ application_settings.namespace_name }}"
        tier: "tier-3"
        type: "web"
    spec:
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "teste"
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: "teste"
        env:
        {% for env in application_settings.envs -%}
        - name: {{env.key}}
          value: {{env.value}}
        {% endfor %}
        image:  "{{ application_settings.image }}:{{ application_settings.version }}"
        imagePullPolicy: Always
        livenessProbe:
          {% if application_settings.healthcheck.protocol == "http" -%}
          httpGet:
            path: {{ application_settings.healthcheck.path }}
            port: {{ application_settings.healthcheck.port | int }}
            scheme: HTTP
          {% elif application_settings.healthcheck.protocol == "tcp" -%}
          tcpSocket:
            port: {{ application_settings.healthcheck.port | int }}
          {% endif %}
          failureThreshold: {{ application_settings.healthcheck.failure_threshold | int }}
          initialDelaySeconds: {{ application_settings.healthcheck.initial_interval | int }}
          periodSeconds: {{ application_settings.healthcheck.interval | int }}
          successThreshold: 1
          timeoutSeconds: {{ application_settings.healthcheck.timeout | int }}
        readinessProbe:
          {% if application_settings.healthcheck.protocol == "http" -%}
          httpGet:
            path: {{ application_settings.healthcheck.path }}
            port: {{ application_settings.healthcheck.port | int }}
            scheme: HTTP
          {% elif application_settings.healthcheck.protocol == "tcp" -%}
          tcpSocket:
            port: {{ application_settings.healthcheck.port | int }}
          {% endif %}
          failureThreshold: {{ application_settings.healthcheck.failure_threshold | int }}
          initialDelaySeconds: {{ application_settings.healthcheck.initial_interval | int }}
          periodSeconds: {{ application_settings.healthcheck.interval | int }}
          successThreshold: 1
          timeoutSeconds: {{ application_settings.healthcheck.timeout | int }}
        resources:
          requests:
            cpu: {{ application_settings.cpu }}
            memory: {{ application_settings.memory }}Mi
          limits:
            cpu: {{ application_settings.cpu }}
            memory: {{ application_settings.memory }}Mi
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      {% if not environment_settings.disable_workload -%}
      nodeSelector:
        workload: {{ application_settings.workload }}
      {% endif %}
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 30